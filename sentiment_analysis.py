# -*- coding: utf-8 -*-
"""sentiment_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iDr5fFnRsN6i-SWKTQDQ--yNoUSx5RnK
"""

#installing kaggle
! pip install kaggle

"""Uploading json file"""

# configuring the path of Kaggle.json file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""Importing Twitter Sentiment Dataset"""

#API to fetch the dataset from kaggle
!kaggle datasets download -d kazanova/sentiment140

#extracting the compressed dataset

from zipfile import ZipFile
dataset = '/content/sentiment140.zip'


with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print('The dataset is extraxted')

import pandas as pd
import numpy as np
import re #regex
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

#printing stopwords in Eng
print(stopwords.words('english')) #stopwords are words which doesnt add much contextual importance

"""Data Processing"""

#loading the data from csv to pandas
twitter_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv', encoding = 'ISO-8859-1')

#checking the number of rows and col
twitter_data.shape

twitter_data.head()

# naming the columns , reading the dataset

column_names = ['target', 'id', 'date', 'flag', 'user', 'text']
twitter_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv', names=column_names, encoding = 'ISO-8859-1')

twitter_data.shape

twitter_data.head()

#counting missing values
twitter_data.isnull().sum()

# checking the distribution of target column
twitter_data['target'].value_counts()

"""equal distribution

convert the target "4" to "1"
"""

twitter_data.replace({'target':{4:1}}, inplace = True)

twitter_data['target'].value_counts()

"""0 --> Negative Tweet
1 --> Positive Tweet

**Stemming**:
reducing a word to its keyword/rootword
ex: actor, actress, acting = act
"""

port_stem = PorterStemmer()

def stemming(content):

  stemmed_content = re.sub('[^a-zA-Z]', ' ', content) #remove anything not belonging to a-z
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

twitter_data['stemmed_content'] = twitter_data['text'].apply(stemming)

twitter_data.head()

print(twitter_data['stemmed_content'])

print(twitter_data['target'])

# seperating the data and label
X = twitter_data['stemmed_content'].values
Y = twitter_data['target'].values

print(X)

print(Y)

"""Splitting the data into training and testing"""

X_train,X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify = Y, random_state = 2) #stratify = equal distribution of both classes 0 and 1

print(X.shape, X_train.shape, X_test.shape)

print(X_train)

print(X_test)

"""Converting textual data to numerical"""

vectorizer = TfidfVectorizer() #assigns importance to each word

X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

print(X_train)

print(X_test)

"""#training the machine learning model"""

model = LogisticRegression(max_iter = 1000)

model.fit(X_train, Y_train)

"""the model tries to understand the words in a positive tweet and words in neg

Model Eval
"""

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy score on training data: ', training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print(training_data_accuracy)

"""Saving the trained model"""

import pickle
filename = 'trained_model.pkl'
pickle.dump(model, open(filename, 'wb'))

"""Using the saved model for future predictions"""

loaded_model = pickle.load(open('/content/trained_model.csv', 'rb'))

X_new = X_test[3]
print(Y_test[3])

prediction = loaded_model.predict(X_new)
print(prediction)

if (prediction[0]==[0]):
  print('Negative')
else:
  print('Positive')

user_input = input("Enter a comment/tweet for sentiment analysis: ")

# Convert input into the same format as training data (TF-IDF)
user_input_transformed = vectorizer.transform([user_input])  # Ensure it's in the right format

# Predict sentiment
prediction = loaded_model.predict(user_input_transformed)

# Display result
if prediction[0] == 0:
    print("Sentiment: Negative ðŸ˜ž")
else:
    print("Sentiment: Positive ðŸ˜Š")